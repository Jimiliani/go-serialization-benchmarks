// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.3
// source: benchmark.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MixedDataSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MixedData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MixedDataSlice) Reset() {
	*x = MixedDataSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixedDataSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedDataSlice) ProtoMessage() {}

func (x *MixedDataSlice) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedDataSlice.ProtoReflect.Descriptor instead.
func (*MixedDataSlice) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{0}
}

func (x *MixedDataSlice) GetData() []*MixedData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MixedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int1     *wrapperspb.Int64Value  `protobuf:"bytes,1,opt,name=int1,proto3" json:"int1,omitempty"`
	Int2     *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=int2,proto3" json:"int2,omitempty"`
	Int3     *wrapperspb.Int64Value  `protobuf:"bytes,3,opt,name=int3,proto3" json:"int3,omitempty"`
	Int4     *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=int4,proto3" json:"int4,omitempty"`
	Int5     *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=int5,proto3" json:"int5,omitempty"`
	Int6     *wrapperspb.Int64Value  `protobuf:"bytes,6,opt,name=int6,proto3" json:"int6,omitempty"`
	Int7     *wrapperspb.Int64Value  `protobuf:"bytes,7,opt,name=int7,proto3" json:"int7,omitempty"`
	Int8     *wrapperspb.Int64Value  `protobuf:"bytes,8,opt,name=int8,proto3" json:"int8,omitempty"`
	Int9     *wrapperspb.Int64Value  `protobuf:"bytes,9,opt,name=int9,proto3" json:"int9,omitempty"`
	Int10    *wrapperspb.Int64Value  `protobuf:"bytes,10,opt,name=int10,proto3" json:"int10,omitempty"`
	String1  *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=string1,proto3" json:"string1,omitempty"`
	String2  *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=string2,proto3" json:"string2,omitempty"`
	String3  *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=string3,proto3" json:"string3,omitempty"`
	String4  *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=string4,proto3" json:"string4,omitempty"`
	String5  *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=string5,proto3" json:"string5,omitempty"`
	String6  *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=string6,proto3" json:"string6,omitempty"`
	String7  *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=string7,proto3" json:"string7,omitempty"`
	String8  *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=string8,proto3" json:"string8,omitempty"`
	String9  *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=string9,proto3" json:"string9,omitempty"`
	String10 *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=string10,proto3" json:"string10,omitempty"`
}

func (x *MixedData) Reset() {
	*x = MixedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedData) ProtoMessage() {}

func (x *MixedData) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedData.ProtoReflect.Descriptor instead.
func (*MixedData) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{1}
}

func (x *MixedData) GetInt1() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int1
	}
	return nil
}

func (x *MixedData) GetInt2() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int2
	}
	return nil
}

func (x *MixedData) GetInt3() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int3
	}
	return nil
}

func (x *MixedData) GetInt4() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int4
	}
	return nil
}

func (x *MixedData) GetInt5() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int5
	}
	return nil
}

func (x *MixedData) GetInt6() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int6
	}
	return nil
}

func (x *MixedData) GetInt7() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int7
	}
	return nil
}

func (x *MixedData) GetInt8() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int8
	}
	return nil
}

func (x *MixedData) GetInt9() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int9
	}
	return nil
}

func (x *MixedData) GetInt10() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int10
	}
	return nil
}

func (x *MixedData) GetString1() *wrapperspb.StringValue {
	if x != nil {
		return x.String1
	}
	return nil
}

func (x *MixedData) GetString2() *wrapperspb.StringValue {
	if x != nil {
		return x.String2
	}
	return nil
}

func (x *MixedData) GetString3() *wrapperspb.StringValue {
	if x != nil {
		return x.String3
	}
	return nil
}

func (x *MixedData) GetString4() *wrapperspb.StringValue {
	if x != nil {
		return x.String4
	}
	return nil
}

func (x *MixedData) GetString5() *wrapperspb.StringValue {
	if x != nil {
		return x.String5
	}
	return nil
}

func (x *MixedData) GetString6() *wrapperspb.StringValue {
	if x != nil {
		return x.String6
	}
	return nil
}

func (x *MixedData) GetString7() *wrapperspb.StringValue {
	if x != nil {
		return x.String7
	}
	return nil
}

func (x *MixedData) GetString8() *wrapperspb.StringValue {
	if x != nil {
		return x.String8
	}
	return nil
}

func (x *MixedData) GetString9() *wrapperspb.StringValue {
	if x != nil {
		return x.String9
	}
	return nil
}

func (x *MixedData) GetString10() *wrapperspb.StringValue {
	if x != nil {
		return x.String10
	}
	return nil
}

type IntDataSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*IntData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *IntDataSlice) Reset() {
	*x = IntDataSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntDataSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntDataSlice) ProtoMessage() {}

func (x *IntDataSlice) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntDataSlice.ProtoReflect.Descriptor instead.
func (*IntDataSlice) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{2}
}

func (x *IntDataSlice) GetData() []*IntData {
	if x != nil {
		return x.Data
	}
	return nil
}

type IntData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int1  *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=int1,proto3" json:"int1,omitempty"`
	Int2  *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=int2,proto3" json:"int2,omitempty"`
	Int3  *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=int3,proto3" json:"int3,omitempty"`
	Int4  *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=int4,proto3" json:"int4,omitempty"`
	Int5  *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=int5,proto3" json:"int5,omitempty"`
	Int6  *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=int6,proto3" json:"int6,omitempty"`
	Int7  *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=int7,proto3" json:"int7,omitempty"`
	Int8  *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=int8,proto3" json:"int8,omitempty"`
	Int9  *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=int9,proto3" json:"int9,omitempty"`
	Int10 *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=int10,proto3" json:"int10,omitempty"`
	Int11 *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=int11,proto3" json:"int11,omitempty"`
	Int12 *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=int12,proto3" json:"int12,omitempty"`
	Int13 *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=int13,proto3" json:"int13,omitempty"`
	Int14 *wrapperspb.Int64Value `protobuf:"bytes,14,opt,name=int14,proto3" json:"int14,omitempty"`
	Int15 *wrapperspb.Int64Value `protobuf:"bytes,15,opt,name=int15,proto3" json:"int15,omitempty"`
	Int16 *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=int16,proto3" json:"int16,omitempty"`
	Int17 *wrapperspb.Int64Value `protobuf:"bytes,17,opt,name=int17,proto3" json:"int17,omitempty"`
	Int18 *wrapperspb.Int64Value `protobuf:"bytes,18,opt,name=int18,proto3" json:"int18,omitempty"`
	Int19 *wrapperspb.Int64Value `protobuf:"bytes,19,opt,name=int19,proto3" json:"int19,omitempty"`
	Int20 *wrapperspb.Int64Value `protobuf:"bytes,20,opt,name=int20,proto3" json:"int20,omitempty"`
}

func (x *IntData) Reset() {
	*x = IntData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntData) ProtoMessage() {}

func (x *IntData) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntData.ProtoReflect.Descriptor instead.
func (*IntData) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{3}
}

func (x *IntData) GetInt1() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int1
	}
	return nil
}

func (x *IntData) GetInt2() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int2
	}
	return nil
}

func (x *IntData) GetInt3() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int3
	}
	return nil
}

func (x *IntData) GetInt4() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int4
	}
	return nil
}

func (x *IntData) GetInt5() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int5
	}
	return nil
}

func (x *IntData) GetInt6() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int6
	}
	return nil
}

func (x *IntData) GetInt7() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int7
	}
	return nil
}

func (x *IntData) GetInt8() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int8
	}
	return nil
}

func (x *IntData) GetInt9() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int9
	}
	return nil
}

func (x *IntData) GetInt10() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int10
	}
	return nil
}

func (x *IntData) GetInt11() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int11
	}
	return nil
}

func (x *IntData) GetInt12() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int12
	}
	return nil
}

func (x *IntData) GetInt13() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int13
	}
	return nil
}

func (x *IntData) GetInt14() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int14
	}
	return nil
}

func (x *IntData) GetInt15() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int15
	}
	return nil
}

func (x *IntData) GetInt16() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int16
	}
	return nil
}

func (x *IntData) GetInt17() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int17
	}
	return nil
}

func (x *IntData) GetInt18() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int18
	}
	return nil
}

func (x *IntData) GetInt19() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int19
	}
	return nil
}

func (x *IntData) GetInt20() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int20
	}
	return nil
}

type StringDataSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StringData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StringDataSlice) Reset() {
	*x = StringDataSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringDataSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringDataSlice) ProtoMessage() {}

func (x *StringDataSlice) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringDataSlice.ProtoReflect.Descriptor instead.
func (*StringDataSlice) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{4}
}

func (x *StringDataSlice) GetData() []*StringData {
	if x != nil {
		return x.Data
	}
	return nil
}

type StringData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String1  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=string1,proto3" json:"string1,omitempty"`
	String2  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=string2,proto3" json:"string2,omitempty"`
	String3  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=string3,proto3" json:"string3,omitempty"`
	String4  *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=string4,proto3" json:"string4,omitempty"`
	String5  *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=string5,proto3" json:"string5,omitempty"`
	String6  *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=string6,proto3" json:"string6,omitempty"`
	String7  *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=string7,proto3" json:"string7,omitempty"`
	String8  *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=string8,proto3" json:"string8,omitempty"`
	String9  *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=string9,proto3" json:"string9,omitempty"`
	String10 *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=string10,proto3" json:"string10,omitempty"`
	String11 *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=string11,proto3" json:"string11,omitempty"`
	String12 *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=string12,proto3" json:"string12,omitempty"`
	String13 *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=string13,proto3" json:"string13,omitempty"`
	String14 *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=string14,proto3" json:"string14,omitempty"`
	String15 *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=string15,proto3" json:"string15,omitempty"`
	String16 *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=string16,proto3" json:"string16,omitempty"`
	String17 *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=string17,proto3" json:"string17,omitempty"`
	String18 *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=string18,proto3" json:"string18,omitempty"`
	String19 *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=string19,proto3" json:"string19,omitempty"`
	String20 *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=string20,proto3" json:"string20,omitempty"`
}

func (x *StringData) Reset() {
	*x = StringData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringData) ProtoMessage() {}

func (x *StringData) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringData.ProtoReflect.Descriptor instead.
func (*StringData) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{5}
}

func (x *StringData) GetString1() *wrapperspb.StringValue {
	if x != nil {
		return x.String1
	}
	return nil
}

func (x *StringData) GetString2() *wrapperspb.StringValue {
	if x != nil {
		return x.String2
	}
	return nil
}

func (x *StringData) GetString3() *wrapperspb.StringValue {
	if x != nil {
		return x.String3
	}
	return nil
}

func (x *StringData) GetString4() *wrapperspb.StringValue {
	if x != nil {
		return x.String4
	}
	return nil
}

func (x *StringData) GetString5() *wrapperspb.StringValue {
	if x != nil {
		return x.String5
	}
	return nil
}

func (x *StringData) GetString6() *wrapperspb.StringValue {
	if x != nil {
		return x.String6
	}
	return nil
}

func (x *StringData) GetString7() *wrapperspb.StringValue {
	if x != nil {
		return x.String7
	}
	return nil
}

func (x *StringData) GetString8() *wrapperspb.StringValue {
	if x != nil {
		return x.String8
	}
	return nil
}

func (x *StringData) GetString9() *wrapperspb.StringValue {
	if x != nil {
		return x.String9
	}
	return nil
}

func (x *StringData) GetString10() *wrapperspb.StringValue {
	if x != nil {
		return x.String10
	}
	return nil
}

func (x *StringData) GetString11() *wrapperspb.StringValue {
	if x != nil {
		return x.String11
	}
	return nil
}

func (x *StringData) GetString12() *wrapperspb.StringValue {
	if x != nil {
		return x.String12
	}
	return nil
}

func (x *StringData) GetString13() *wrapperspb.StringValue {
	if x != nil {
		return x.String13
	}
	return nil
}

func (x *StringData) GetString14() *wrapperspb.StringValue {
	if x != nil {
		return x.String14
	}
	return nil
}

func (x *StringData) GetString15() *wrapperspb.StringValue {
	if x != nil {
		return x.String15
	}
	return nil
}

func (x *StringData) GetString16() *wrapperspb.StringValue {
	if x != nil {
		return x.String16
	}
	return nil
}

func (x *StringData) GetString17() *wrapperspb.StringValue {
	if x != nil {
		return x.String17
	}
	return nil
}

func (x *StringData) GetString18() *wrapperspb.StringValue {
	if x != nil {
		return x.String18
	}
	return nil
}

func (x *StringData) GetString19() *wrapperspb.StringValue {
	if x != nil {
		return x.String19
	}
	return nil
}

func (x *StringData) GetString20() *wrapperspb.StringValue {
	if x != nil {
		return x.String20
	}
	return nil
}

var File_benchmark_proto protoreflect.FileDescriptor

var file_benchmark_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0e,
	0x4d, 0x69, 0x78, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x08, 0x0a, 0x09, 0x4d, 0x69, 0x78,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x31, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x32, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x33,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x33, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x74,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x34, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e,
	0x74, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x35, 0x12, 0x2f, 0x0a, 0x04, 0x69,
	0x6e, 0x74, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x36, 0x12, 0x2f, 0x0a, 0x04,
	0x69, 0x6e, 0x74, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x37, 0x12, 0x2f, 0x0a,
	0x04, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x38, 0x12, 0x2f,
	0x0a, 0x04, 0x69, 0x6e, 0x74, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x39, 0x12,
	0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x31, 0x30, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x34, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x36, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x36, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x37, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x37, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x38, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x38, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x30, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x30, 0x22, 0x36, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x49,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf3, 0x07, 0x0a,
	0x07, 0x49, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x31, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x74,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x32, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e,
	0x74, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x33, 0x12, 0x2f, 0x0a, 0x04, 0x69,
	0x6e, 0x74, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x34, 0x12, 0x2f, 0x0a, 0x04,
	0x69, 0x6e, 0x74, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x35, 0x12, 0x2f, 0x0a,
	0x04, 0x69, 0x6e, 0x74, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x36, 0x12, 0x2f,
	0x0a, 0x04, 0x69, 0x6e, 0x74, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x37, 0x12,
	0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x38,
	0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74,
	0x39, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x31, 0x30, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x31, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x31, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x32,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x32, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e,
	0x74, 0x31, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x33, 0x12, 0x31, 0x0a,
	0x05, 0x69, 0x6e, 0x74, 0x31, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x34,
	0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x31, 0x35, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x37, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x37, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74,
	0x31, 0x38, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x38, 0x12, 0x31, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x31, 0x39, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x39, 0x12,
	0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x32, 0x30, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x32, 0x30, 0x22, 0x3c, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x82, 0x09, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12,
	0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x12,
	0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x36, 0x12,
	0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x37, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x38, 0x12,
	0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x30, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x31, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x31, 0x12, 0x38, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x32, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x33, 0x12,
	0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x34, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x35, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x36, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x36, 0x12, 0x38, 0x0a,
	0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x37, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x37, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x38, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x38, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x39, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x39, 0x12, 0x38, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x30, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x30, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_benchmark_proto_rawDescOnce sync.Once
	file_benchmark_proto_rawDescData = file_benchmark_proto_rawDesc
)

func file_benchmark_proto_rawDescGZIP() []byte {
	file_benchmark_proto_rawDescOnce.Do(func() {
		file_benchmark_proto_rawDescData = protoimpl.X.CompressGZIP(file_benchmark_proto_rawDescData)
	})
	return file_benchmark_proto_rawDescData
}

var file_benchmark_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_benchmark_proto_goTypes = []interface{}{
	(*MixedDataSlice)(nil),         // 0: benchmark.MixedDataSlice
	(*MixedData)(nil),              // 1: benchmark.MixedData
	(*IntDataSlice)(nil),           // 2: benchmark.IntDataSlice
	(*IntData)(nil),                // 3: benchmark.IntData
	(*StringDataSlice)(nil),        // 4: benchmark.StringDataSlice
	(*StringData)(nil),             // 5: benchmark.StringData
	(*wrapperspb.Int64Value)(nil),  // 6: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil), // 7: google.protobuf.StringValue
}
var file_benchmark_proto_depIdxs = []int32{
	1,  // 0: benchmark.MixedDataSlice.data:type_name -> benchmark.MixedData
	6,  // 1: benchmark.MixedData.int1:type_name -> google.protobuf.Int64Value
	6,  // 2: benchmark.MixedData.int2:type_name -> google.protobuf.Int64Value
	6,  // 3: benchmark.MixedData.int3:type_name -> google.protobuf.Int64Value
	6,  // 4: benchmark.MixedData.int4:type_name -> google.protobuf.Int64Value
	6,  // 5: benchmark.MixedData.int5:type_name -> google.protobuf.Int64Value
	6,  // 6: benchmark.MixedData.int6:type_name -> google.protobuf.Int64Value
	6,  // 7: benchmark.MixedData.int7:type_name -> google.protobuf.Int64Value
	6,  // 8: benchmark.MixedData.int8:type_name -> google.protobuf.Int64Value
	6,  // 9: benchmark.MixedData.int9:type_name -> google.protobuf.Int64Value
	6,  // 10: benchmark.MixedData.int10:type_name -> google.protobuf.Int64Value
	7,  // 11: benchmark.MixedData.string1:type_name -> google.protobuf.StringValue
	7,  // 12: benchmark.MixedData.string2:type_name -> google.protobuf.StringValue
	7,  // 13: benchmark.MixedData.string3:type_name -> google.protobuf.StringValue
	7,  // 14: benchmark.MixedData.string4:type_name -> google.protobuf.StringValue
	7,  // 15: benchmark.MixedData.string5:type_name -> google.protobuf.StringValue
	7,  // 16: benchmark.MixedData.string6:type_name -> google.protobuf.StringValue
	7,  // 17: benchmark.MixedData.string7:type_name -> google.protobuf.StringValue
	7,  // 18: benchmark.MixedData.string8:type_name -> google.protobuf.StringValue
	7,  // 19: benchmark.MixedData.string9:type_name -> google.protobuf.StringValue
	7,  // 20: benchmark.MixedData.string10:type_name -> google.protobuf.StringValue
	3,  // 21: benchmark.IntDataSlice.data:type_name -> benchmark.IntData
	6,  // 22: benchmark.IntData.int1:type_name -> google.protobuf.Int64Value
	6,  // 23: benchmark.IntData.int2:type_name -> google.protobuf.Int64Value
	6,  // 24: benchmark.IntData.int3:type_name -> google.protobuf.Int64Value
	6,  // 25: benchmark.IntData.int4:type_name -> google.protobuf.Int64Value
	6,  // 26: benchmark.IntData.int5:type_name -> google.protobuf.Int64Value
	6,  // 27: benchmark.IntData.int6:type_name -> google.protobuf.Int64Value
	6,  // 28: benchmark.IntData.int7:type_name -> google.protobuf.Int64Value
	6,  // 29: benchmark.IntData.int8:type_name -> google.protobuf.Int64Value
	6,  // 30: benchmark.IntData.int9:type_name -> google.protobuf.Int64Value
	6,  // 31: benchmark.IntData.int10:type_name -> google.protobuf.Int64Value
	6,  // 32: benchmark.IntData.int11:type_name -> google.protobuf.Int64Value
	6,  // 33: benchmark.IntData.int12:type_name -> google.protobuf.Int64Value
	6,  // 34: benchmark.IntData.int13:type_name -> google.protobuf.Int64Value
	6,  // 35: benchmark.IntData.int14:type_name -> google.protobuf.Int64Value
	6,  // 36: benchmark.IntData.int15:type_name -> google.protobuf.Int64Value
	6,  // 37: benchmark.IntData.int16:type_name -> google.protobuf.Int64Value
	6,  // 38: benchmark.IntData.int17:type_name -> google.protobuf.Int64Value
	6,  // 39: benchmark.IntData.int18:type_name -> google.protobuf.Int64Value
	6,  // 40: benchmark.IntData.int19:type_name -> google.protobuf.Int64Value
	6,  // 41: benchmark.IntData.int20:type_name -> google.protobuf.Int64Value
	5,  // 42: benchmark.StringDataSlice.data:type_name -> benchmark.StringData
	7,  // 43: benchmark.StringData.string1:type_name -> google.protobuf.StringValue
	7,  // 44: benchmark.StringData.string2:type_name -> google.protobuf.StringValue
	7,  // 45: benchmark.StringData.string3:type_name -> google.protobuf.StringValue
	7,  // 46: benchmark.StringData.string4:type_name -> google.protobuf.StringValue
	7,  // 47: benchmark.StringData.string5:type_name -> google.protobuf.StringValue
	7,  // 48: benchmark.StringData.string6:type_name -> google.protobuf.StringValue
	7,  // 49: benchmark.StringData.string7:type_name -> google.protobuf.StringValue
	7,  // 50: benchmark.StringData.string8:type_name -> google.protobuf.StringValue
	7,  // 51: benchmark.StringData.string9:type_name -> google.protobuf.StringValue
	7,  // 52: benchmark.StringData.string10:type_name -> google.protobuf.StringValue
	7,  // 53: benchmark.StringData.string11:type_name -> google.protobuf.StringValue
	7,  // 54: benchmark.StringData.string12:type_name -> google.protobuf.StringValue
	7,  // 55: benchmark.StringData.string13:type_name -> google.protobuf.StringValue
	7,  // 56: benchmark.StringData.string14:type_name -> google.protobuf.StringValue
	7,  // 57: benchmark.StringData.string15:type_name -> google.protobuf.StringValue
	7,  // 58: benchmark.StringData.string16:type_name -> google.protobuf.StringValue
	7,  // 59: benchmark.StringData.string17:type_name -> google.protobuf.StringValue
	7,  // 60: benchmark.StringData.string18:type_name -> google.protobuf.StringValue
	7,  // 61: benchmark.StringData.string19:type_name -> google.protobuf.StringValue
	7,  // 62: benchmark.StringData.string20:type_name -> google.protobuf.StringValue
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_benchmark_proto_init() }
func file_benchmark_proto_init() {
	if File_benchmark_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_benchmark_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixedDataSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntDataSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringDataSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_benchmark_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_benchmark_proto_goTypes,
		DependencyIndexes: file_benchmark_proto_depIdxs,
		MessageInfos:      file_benchmark_proto_msgTypes,
	}.Build()
	File_benchmark_proto = out.File
	file_benchmark_proto_rawDesc = nil
	file_benchmark_proto_goTypes = nil
	file_benchmark_proto_depIdxs = nil
}
